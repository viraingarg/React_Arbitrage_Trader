{"version":3,"sources":["Components/Graph.js","Components/GraphContainer.js","App.js","serviceWorker.js","index.js"],"names":["Graph","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","chart","getCurrencyPairLabel","bind","assertThisInitialized","event","handleChange","target","unload","ids","setState","bb","generate","data","columns","concat","toConsumableArray","graphData","bindto","id","load","currenyPair","slice","_this2","options","currencyPairs","map","index","react_default","a","createElement","key","currency_name","className","onChange","length","Component","GraphContainer","graph1Change","currencyPair","console","log","graphData1","socket1","send","JSON","stringify","graph2Change","graphData2","socket2","graph3Change","graphData3","socket3","increasePip","e","pipValue","decreasePip","errorMessage","loading","totalItemsCount","WebSocket","createSocket","onclose","evt","onmessage","array","shift","onopen","computedValue","buttonClass","buttonLabel","htmlFor","onClick","type","Components_Graph","App","axios","get","then","response","catch","error","react_loader_spinner_default","color","height","width","Components_GraphContainer","Boolean","window","location","hostname","match","ReactDOM","render","react_router_dom","react_router","path","exact","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a9dd3a81.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport bb from \"billboard.js\";\r\nimport \"billboard.js/dist/billboard.css\";\r\nimport \"billboard.js/dist/theme/insight.css\";\r\n\r\nclass Graph extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { value: \"EURUSD\" };\r\n    this.chart = null;\r\n    this.getCurrencyPairLabel = this.getCurrencyPairLabel.bind(this);\r\n  }\r\n  handleChange(event) {\r\n    this.props.handleChange(event.target.value);\r\n    this.chart.unload({\r\n      ids: this.state.value\r\n    });\r\n    this.setState({ value: event.target.value });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.chart = bb.generate({\r\n      data: {\r\n        columns: [[this.state.value, ...this.props.graphData]]\r\n      },\r\n      bindto: \"#\" + this.props.id\r\n    });\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.chart.load({\r\n      columns: [[this.state.value, ...this.props.graphData]]\r\n    });\r\n  }\r\n\r\n  getCurrencyPairLabel(currenyPair) {\r\n    var str1 = currenyPair.slice(0, 3);\r\n    var str2 = currenyPair.slice(3);\r\n    return str1 + \"/\" + str2;\r\n  }\r\n\r\n  render() {\r\n    let options = this.props.currencyPairs.map((currenyPair, index) => {\r\n      return (\r\n        <option key={index} value={currenyPair.currency_name}>\r\n          {this.getCurrencyPairLabel(currenyPair.currency_name)}\r\n        </option>\r\n      );\r\n    });\r\n    return (\r\n      <div className=\"graph\">\r\n        <select\r\n          value={this.state.value}\r\n          onChange={this.handleChange.bind(this)}\r\n        >\r\n          {options}\r\n        </select>\r\n        <h1>{this.props.graphData[this.props.graphData.length - 1]}</h1>\r\n        <div id={this.props.id} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Graph;\r\n","import React, { Component } from \"react\";\r\nimport Graph from \"./Graph\";\r\n\r\nclass GraphContainer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currencyPairs: [],\r\n      errorMessage: \"\",\r\n      loading: false,\r\n      totalItemsCount: 0,\r\n      graphData1: [],\r\n      graphData2: [],\r\n      graphData3: [],\r\n      pipValue: 1\r\n    };\r\n    this.socket1 = null;\r\n    this.socket2 = null;\r\n    this.socket3 = null;\r\n  }\r\n\r\n  createSocket() {\r\n    var websocket = new WebSocket(\"wss://stocksimulator.intuhire.com\");\r\n    return websocket;\r\n  }\r\n\r\n  graph1Change = currencyPair => {\r\n    console.log(\"Curreny Pair sent \", currencyPair);\r\n    this.setState({ graphData1: [] }, () => {\r\n      this.socket1.send(JSON.stringify({ currencyPair: currencyPair }));\r\n    });\r\n  };\r\n\r\n  graph2Change = currencyPair => {\r\n    console.log(\"Curreny Pair sent \", currencyPair);\r\n    this.setState({ graphData2: [] }, () => {\r\n      this.socket2.send(JSON.stringify({ currencyPair: currencyPair }));\r\n    });\r\n  };\r\n\r\n  graph3Change = currencyPair => {\r\n    console.log(\"Curreny Pair sent \", currencyPair);\r\n    this.setState({ graphData3: [] }, () => {\r\n      this.socket3.send(JSON.stringify({ currencyPair: currencyPair }));\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    //Creating socket1 for Graph 1\r\n    this.socket1 = this.createSocket();\r\n\r\n    this.socket1.onclose = evt => {\r\n      console.log(\"Closing connection\");\r\n    };\r\n    this.socket1.onmessage = evt => {\r\n      console.log(\"Data Received in 1: \", evt.data);\r\n      var array = [...this.state.graphData1, evt.data];\r\n      if (array.length > 10) array.shift();\r\n      this.setState({ graphData1: array });\r\n    };\r\n    this.socket1.onopen = evt => {\r\n      console.log(\"Socket1 connection established.\");\r\n      this.socket1.send(JSON.stringify({ currencyPair: \"EURUSD\" }));\r\n    };\r\n\r\n    //Creating socket2 for Graph 2\r\n    this.socket2 = this.createSocket(2);\r\n\r\n    this.socket2.onclose = evt => {\r\n      console.log(\"Closing connection\");\r\n    };\r\n    this.socket2.onmessage = evt => {\r\n      console.log(\"Data Received 2: \", evt.data);\r\n      var array = [...this.state.graphData2, evt.data];\r\n      if (array.length > 10) array.shift();\r\n      this.setState({ graphData2: array });\r\n    };\r\n    this.socket2.onopen = evt => {\r\n      console.log(\"Socket2 connection established.\");\r\n      this.socket2.send(JSON.stringify({ currencyPair: \"EURUSD\" }));\r\n    };\r\n\r\n    //Creating socket3 for Graph 3\r\n    this.socket3 = this.createSocket(3);\r\n\r\n    this.socket3.onclose = evt => {\r\n      console.log(\"Closing connection\");\r\n    };\r\n    this.socket3.onmessage = evt => {\r\n      console.log(\"Data Received 3: \", evt.data);\r\n      var array = [...this.state.graphData3, evt.data];\r\n      if (array.length > 10) array.shift();\r\n      this.setState({ graphData3: array });\r\n    };\r\n    this.socket3.onopen = evt => {\r\n      console.log(\"Socket3 connection established.\");\r\n      this.socket3.send(JSON.stringify({ currencyPair: \"EURUSD\" }));\r\n    };\r\n  }\r\n\r\n  handleChange(e) {\r\n    this.setState({ pipValue: e.target.value });\r\n  }\r\n\r\n  increasePip = e => {\r\n    this.setState({ pipValue: +this.state.pipValue + 1 });\r\n  };\r\n\r\n  decreasePip = e => {\r\n    this.setState({\r\n      pipValue:\r\n        this.state.pipValue === 0\r\n          ? 0\r\n          : +this.state.pipValue - 1 < 0\r\n          ? 0\r\n          : +this.state.pipValue - 1\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let graph1Value = this.state.graphData1[this.state.graphData1.length - 1];\r\n    let graph2Value = this.state.graphData2[this.state.graphData2.length - 1];\r\n    let graph3Value = this.state.graphData3[this.state.graphData3.length - 1];\r\n    let computedValue = +graph1Value / +graph2Value - +graph3Value;\r\n    if (computedValue < -(+this.state.pipValue / 1000)) {\r\n      this.buttonClass = \"buy-button\";\r\n      this.buttonLabel = \"BUY\";\r\n    } else if (computedValue > +this.state.pipValue / 1000) {\r\n      this.buttonClass = \"sell-button\";\r\n      this.buttonLabel = \"SELL\";\r\n    } else if (\r\n      computedValue > -(+this.state.pipValue / 1000) &&\r\n      computedValue < +this.state.pipValue / 1000\r\n    ) {\r\n      this.buttonClass = \"disable-button\";\r\n      this.buttonLabel = \"\";\r\n    }\r\n\r\n    return (\r\n      <div className=\"graph-container\">\r\n        <div className=\"pip-selector\">\r\n          <label htmlFor=\"pip\">\r\n            PIP Difference\r\n            <i className=\"fas fa-minus\" onClick={this.decreasePip} />\r\n            <i className=\"fas fa-plus\" onClick={this.increasePip} />\r\n          </label>\r\n          <input\r\n            id=\"pip\"\r\n            type=\"text\"\r\n            value={this.state.pipValue}\r\n            onChange={this.handleChange.bind(this)}\r\n          />\r\n        </div>\r\n        <div className=\"graph1\">\r\n          <Graph\r\n            currencyPairs={this.props.currencyPairs}\r\n            handleChange={this.graph1Change}\r\n            graphData={this.state.graphData1}\r\n            id=\"lineChart1\"\r\n          />\r\n        </div>\r\n        <div className=\"graph2\">\r\n          <Graph\r\n            currencyPairs={this.props.currencyPairs}\r\n            handleChange={this.graph2Change}\r\n            graphData={this.state.graphData2}\r\n            id=\"lineChart2\"\r\n          />\r\n        </div>\r\n        <div className=\"graph3\">\r\n          <Graph\r\n            currencyPairs={this.props.currencyPairs}\r\n            handleChange={this.graph3Change}\r\n            graphData={this.state.graphData3}\r\n            id=\"lineChart3\"\r\n          />\r\n        </div>\r\n        <div className=\"button\">\r\n          <button className={this.buttonClass}>{this.buttonLabel}</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GraphContainer;\r\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport GraphContainer from \"./Components/GraphContainer\";\nimport \"./css/style.css\";\nimport Loader from \"react-loader-spinner\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      currencyPairs: [],\n      errorMessage: \"\",\n      loading: false,\n      totalItemsCount: 0\n    };\n  }\n\n  componentDidMount() {\n    this.setState({ loading: true });\n    axios\n      .get(\"https://restsimulator.intuhire.com/currency_pairs\")\n      .then(response => {\n        console.log(\"Success response from Api \", response);\n        this.setState({\n          currencyPairs: response.data,\n          errorMessage: \"\",\n          loading: false,\n          totalItemsCount: response.data.length\n        });\n      })\n      .catch(error => {\n        console.log(\"Error response from Api\", error.response);\n        this.setState({\n          currencyPairs: [],\n          errorMessage: \"Unable to fetch data, please try later.\",\n          loading: false,\n          totalItemsCount: 0\n        });\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        <div id=\"header\">\n          <span>React Arbitrage Trader</span>\n        </div>\n        <div id=\"body\">\n          {this.state.loading ? (\n            <div>\n              <div className=\"loader loader-align\">\n                <Loader type=\"Watch\" color=\"#00BFFF\" height=\"100\" width=\"100\" />\n              </div>\n              <div className=\"loader-label loader\">\n                <span>Loading.....</span>\n              </div>\n            </div>\n          ) : this.state.errorMessage !== \"\" ? (\n            <span>Eroor Loading api</span>\n          ) : (\n            <GraphContainer currencyPairs={this.state.currencyPairs} />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nReactDOM.render(\n  <Router>\n    <div>\n      <Route path=\"/\" exact component={App} />\n    </div>\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}